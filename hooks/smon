#!/usr/bin/env python

import os
import subprocess
import json
import time
import sys
#import psutil
#import socket

name="_smon.out"
delay=30

def get_size(start_path = '.'):
    total_size = 0
    for dirpath, dirnames, filenames in os.walk(start_path):
        for f in filenames:
            fp = os.path.join(dirpath, f)
            total_size += os.path.getsize(fp)
    return total_size

with open(name, "w") as outfile:

    env = {}
    #put some batch scheduler specific env
    for k in os.environ:
        if k.startswith(("PBS_", "SLURM_", "OSG")):
            env[k] = os.environ[k]

    #figure out max PPN
    max_ppn = os.sysconf('SC_NPROCESSORS_CONF') #default to all available cores
    if "PBS_NUM_PPN" in os.environ:
        max_ppn = int(os.environ["PBS_NUM_PPN"])
    #from https://slurm.schedmd.com/srun.html
    if "SLURM_CPUS_ON_NODE" in os.environ:
        max_ppn = int(os.environ["SLURM_CPUS_ON_NODE"])

    #figure out walltime
    wall_time = None
    if "PBS_WALLTIME" in os.environ:
        wall_time = int(os.environ["PBS_WALLTIME"])
    #TODO ..figure wall time for slurm?

    #figure out max mem
    max_mem = os.sysconf('SC_PAGE_SIZE') * os.sysconf('SC_PHYS_PAGES')
    #TODO - how can I set this for PBS?
    if "SLURM_MEM_PER_NODE" in os.environ:
        #Default units are megabytes unless the SchedulerParameters configuration parameter includes the "default_gbytes" option for gigabytes.
        #https://slurm.schedmd.com/sbatch.html
        max_mem = int(os.environ["SLURM_MEM_PER_NODE"])*1024*1024 

    #other things to consider..
    #PBS_WALLTIME=10800

    #dump info that doesn't change on the first entry
    json.dump({
        "time": time.time(), 
        "uname": os.uname(),
        #"hostname": socket.gethostname(), #redundant with uname[1]
        #"cpu_count": psutil.cpu_count(), 
        "cpu_total": os.sysconf('SC_NPROCESSORS_CONF'),
        "cpu_requested": max_ppn,

        #"memory_total": psutil.virtual_memory().total,
        "memory_total": os.sysconf('SC_PAGE_SIZE') * os.sysconf('SC_PHYS_PAGES'),
        "memory_requested": max_mem,

        "env": env,

        }, outfile)
    outfile.write("\n")
    outfile.flush()

    #print("updating "+name+" every "+str(delay)+" seconds")
    while True:

        #query process under current session
        processes = []
        sid=os.getsid(os.getpid())
        out=subprocess.check_output(["ps", "-s", str(sid), "ho", "pid,pcpu,pmem,rss,vsz,etime,cmd"])
        for line in out.split("\n"):
            if line == "":
                continue
            tokens=line.split()
            pid=tokens[0]
            pcpu=float(tokens[1])
            pmem=float(tokens[2])
            rss=int(tokens[3])
            vsz=int(tokens[4])
            etime=tokens[5]
            cmd=' '.join(tokens[6:])

            #ignore myself.
            if cmd.startswith("ps -s"):
                continue

            if etime != "00:00": #pcpu > 0 or pmem > 0:
                processes.append({"pid": pid, "pcpu": pcpu, "pmem": pmem, "rss": rss, "vsz": vsz, "etime": etime, "cmd": cmd})

        #debug..
        #print(json.dumps(processes, indent=4))
        #sys.stdout.flush()

        #query disk usage
        disks = []
        out=subprocess.check_output(["du", "-s"])
        for line in out.split("\n"):
            if line == "":
                continue
            tokens=line.split()
            size=int(tokens[0])
            path=tokens[1]
            disks.append({"path": path, "size": size})

        #debug
        #print(json.dumps(disks, indent=4))
        #sys.stdout.flush()

        json.dump({
            "time": time.time(), 
            "processes": processes, 
            "disks": disks,
            "memory_avail": os.sysconf('SC_PAGE_SIZE') * os.sysconf('SC_AVPHYS_PAGES'),
            #"memory_avail": psutil.virtual_memory().available,
            #"memory_used": psutil.virtual_memory().used,
            #"memory_free": psutil.virtual_memory().free,
            }, outfile)
        outfile.write("\n")
        outfile.flush()

        time.sleep(delay)
